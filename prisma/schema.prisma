// prisma/schema.prisma - Updated with User model

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// User model for authentication
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    username  String   @unique
    password  String // Will be hashed with bcrypt
    firstName String?
    lastName  String?
    phone     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email])
    @@index([username])
}

// Existing Event model (keep as is)
model Event {
    id                  String  @id @default(cuid())
    title               String
    description         String
    detailedDescription String?
    date                String
    time                String
    venueName           String
    venueAddress        String
    city                String
    state               String
    imageUrl            String?
    price               Float   @default(0)
    isFree              Boolean @default(false)
    latitude            Float?
    longitude           Float?
    category            String
    organizer           String
    tags                String // JSON string array

    // Aggregation metadata
    sourceId         String?
    sourceName       String?
    sourceUrl        String?
    originalId       String?
    lastUpdated      DateTime @default(now())
    isVerified       Boolean  @default(false)
    aggregationScore Int      @default(0)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([city])
    @@index([category])
    @@index([date])
    @@index([sourceId])
}

// Existing ScrapingLog model (keep as is)
model ScrapingLog {
    id            String   @id @default(cuid())
    source        String
    success       Boolean
    eventsFound   Int      @default(0)
    eventsAdded   Int      @default(0)
    eventsUpdated Int      @default(0)
    errors        String? // JSON string array
    duration      Int? // milliseconds
    timestamp     DateTime @default(now())

    @@index([source])
    @@index([timestamp])
}

// Existing EventSource model (keep as is)
model EventSource {
    id             String    @id @default(cuid())
    name           String    @unique
    baseUrl        String
    enabled        Boolean   @default(true)
    apiKey         String?
    rateLimit      Int       @default(2000) // milliseconds
    lastScrapeTime DateTime?
    totalEvents    Int       @default(0)
    successRate    Float     @default(100.0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
