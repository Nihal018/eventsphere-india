// prisma/schema.prisma - PostgreSQL version
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model for authentication
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    username  String   @unique
    password  String // Will be hashed with bcrypt
    firstName String?
    lastName  String?
    phone     String?
    role      String   @default("USER") // USER, ORGANIZER, ADMIN
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    events   Event[]
    bookings Booking[]

    @@index([email])
    @@index([username])
    @@index([role])
}

// Enhanced Event model
model Event {
    id                  String  @id @default(cuid())
    title               String
    description         String
    detailedDescription String?
    shortDesc           String?
    date                String // Keeping as String for compatibility
    time                String
    venueName           String
    venueAddress        String
    city                String
    state               String
    imageUrl            String?
    imagePath           String?
    price               Float   @default(0)
    isFree              Boolean @default(false)
    latitude            Float?
    longitude           Float?
    category            String
    organizer           String // Legacy field for compatibility
    tags                String  @default("[]") // JSON string array

    // New organizer management fields
    organizerId   String?
    organizerUser User?   @relation(fields: [organizerId], references: [id], onDelete: SetNull)
    maxAttendees  Int?
    status        String  @default("PUBLISHED") // DRAFT, PUBLISHED, CANCELLED, COMPLETED
    isUserCreated Boolean @default(false)

    // Existing aggregation metadata
    sourceId         String?
    sourceName       String?
    sourceUrl        String?
    originalId       String?
    lastUpdated      DateTime @default(now())
    isVerified       Boolean  @default(false)
    aggregationScore Int      @default(0)

    // Relations
    bookings Booking[]

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([city])
    @@index([category])
    @@index([date])
    @@index([sourceId])
    @@index([organizerId])
    @@index([status])
    @@index([isUserCreated])
}

// Booking model for event attendance
model Booking {
    id      String @id @default(cuid())
    userId  String
    eventId String
    status  String @default("CONFIRMED") // CONFIRMED, CANCELLED, ATTENDED

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Prevent duplicate bookings
    @@unique([userId, eventId])
    @@index([userId])
    @@index([eventId])
}

// Existing ScrapingLog model
model ScrapingLog {
    id            String   @id @default(cuid())
    source        String
    success       Boolean
    eventsFound   Int      @default(0)
    eventsAdded   Int      @default(0)
    eventsUpdated Int      @default(0)
    errors        String?
    duration      Int?
    timestamp     DateTime @default(now())

    @@index([source])
    @@index([timestamp])
}

// Existing EventSource model
model EventSource {
    id             String    @id @default(cuid())
    name           String    @unique
    baseUrl        String
    enabled        Boolean   @default(true)
    apiKey         String?
    rateLimit      Int       @default(2000)
    lastScrapeTime DateTime?
    totalEvents    Int       @default(0)
    successRate    Float     @default(100.0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
